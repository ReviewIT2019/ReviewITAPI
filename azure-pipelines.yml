# Docker image
# Build a Docker image to deploy, run, or push to a container registry.
# Add steps that use Docker Compose, tag images, push to a registry, run an image, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/docker

trigger:
- master
- releases/*

variables:
- group: 'dockerhub niss'
- name: 'imageName'
  value: 'reviewitapi:$(build.buildId)'

resources:
  containers:
  - container: dev1
    image: ubuntu:16.04

jobs: 
- job: Docker
  container: dev1
  pool:
    vmImage: 'Ubuntu-16.04'
  condition: always()
  steps:
  # prepare docker build, run tests and stop container
    - script: docker build -f "ReviewIT.Backend.Web/Dockerfile" -t $(dockerId)/$(imageName) --label "com.reviewitapi.created-by=azurePipeline" .
      displayName: 'docker build'
    - script: docker run -d --name dotnetcoreapp -e "ASPNETCORE_URLS=https://+:443;http://+:80" -e "ASPNETCORE_HTTPS_PORT=44362" -e "ASPNETCORE_ENVIRONMENT=Development" -e ASPNETCORE_Kestrel__Certificates__Default__Password="crypticpassword" -e ASPNETCORE_Kestrel__Certificates__Default__Path=/../.aspnet/https/aspnetapp.pfx --env-file ./env.list -p 51395:80 -p 44362:443 $(dockerId)/$(imageName)
      displayName: 'docker run detached'
    - script: docker cp dotnetcoreapp:app/TestResults $(System.DefaultWorkingDirectory)
      displayName: 'docker copy testresults to azure working directory'
    - script: docker stop $(docker ps -aq)
      displayName: 'docker stop all containers'
- job: DockerHub
  container: dev1
  dependsOn: Docker
  condition: and(succeeded(),eq(variables['Build.SourceBranch'], 'refs/heads/master'))
  steps:
  # publish to dockerhub on successfull master build
    - script: docker login -u $(dockerId) -p $(pswd)
      displayName: 'DockerHub > docker login'
    - script: docker push $(dockerId)/$(imageName)
      displayName: 'DockerHub > publish'
- job: PublishTestResults
  container: dev1
  dependsOn: Docker
  steps: 
  # show test results in azure
    - task: PublishTestResults@2
      inputs:
        testRunner: VSTest
        testResultsFiles: '**/*.trx'
        failTaskOnFailedTests: true
      displayName: 'PublishTestResults to Azure'