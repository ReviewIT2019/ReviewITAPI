
# Docker image
# Build a Docker image to deploy, run, or push to a container registry.
# Add steps that use Docker Compose, tag images, push to a registry, run an image, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/docker

trigger:
  branches:
    include:
    - master
    - feature/*

variables:
- group: 'dockerhub niss'
- name: 'imageName'
  value: 'reviewitapi:$(build.buildId)'

jobs: 
- job: Docker
  pool:
    vmImage: 'ubuntu-16.04'
  steps:
  # build dockerfile
    - script: docker build -f "ReviewIT.Backend.Web/Dockerfile" -t $(dockerId)/$(imageName) --label "com.reviewitapi.created-by=azurePipeline" .
      displayName: 'docker build'

  # if on master, push image to dockerhub
    - script: |
        docker login -u $(dockerId) -p $(pswd)
        docker push $(dockerId)/$(imageName)
      displayName: 'Publish to DockerHub'
      condition: and(succeeded(),eq(variables['Build.SourceBranch'], 'refs/heads/master'))

  # run tests within dockerimage and copy out results
    - script: |
        docker run -d --name dotnetcoreapp -e "ASPNETCORE_URLS=https://+:443;http://+:80" -e "ASPNETCORE_HTTPS_PORT=44362" -e "ASPNETCORE_ENVIRONMENT=Development" -e ASPNETCORE_Kestrel__Certificates__Default__Password="crypticpassword" -e ASPNETCORE_Kestrel__Certificates__Default__Path=/../.aspnet/https/aspnetapp.pfx --env-file ./env.list -p 51395:80 -p 44362:443 $(dockerId)/$(imageName)
        docker cp dotnetcoreapp:app/TestResults $(System.DefaultWorkingDirectory)
        docker stop $(docker ps -aq)
      displayName: 'docker copy testresults to azure working directory'

  # publish results to azure
    - task: PublishBuildArtifacts@1
      inputs:
        pathtoPublish: '$(System.DefaultWorkingDirectory)'
        artifactName: BuildArtifacts

# download artifacts and publish
- job: PublishTestResultsToAzureDevOps
  pool: Hosted Ubuntu 1604
  dependsOn: Docker
  steps: 
    - checkout: none #skip checking out the default repository resource
    - task: DownloadBuildArtifacts@0
      displayName: 'Download Build Artifacts'
      inputs:
        artifactName: BuildArtifacts
        downloadPath: $(System.DefaultWorkingDirectory)
    - task: PublishTestResults@2
      inputs:
        testRunner: VSTest
        testResultsFiles: '**/*.trx'
        failTaskOnFailedTests: true
      displayName: 'PublishTestResults to Azure'